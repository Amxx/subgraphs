type Account @entity {
	id: ID!
	asTetherToken: TetherToken
	isBlacklisted: Boolean
	balances: [Balance!]! @derivedFrom(field: "account")
	approvalsOwner: [Approval!]! @derivedFrom(field: "owner")
	approvalsSpender: [Approval!]! @derivedFrom(field: "spender")
	transferFromEvent: [Transfer!]! @derivedFrom(field: "from")
	transferToEvent: [Transfer!]! @derivedFrom(field: "to")
	addedblacklists: [AddedBlackList!]! @derivedFrom(field: "user")
	removedblacklists: [RemovedBlackList!]! @derivedFrom(field: "user")
}
type TetherToken @entity {
	id: ID!
	asAccount: Account!
	name: String
	symbol: String
	decimals: Int!
	isPaused: Boolean!
	rate: BigDecimal!
	maximumFee: BigDecimal!
	upgradedAddress: Account
	totalSupply: Balance!
	balances: [Balance!]! @derivedFrom(field: "contract")
	approvals: [Approval!]! @derivedFrom(field: "contract")
	transfers: [Transfer!]! @derivedFrom(field: "contract")
	paused: [Paused!]! @derivedFrom(field: "contract")
	addedblacklists: [AddedBlackList!]! @derivedFrom(field: "contract")
	removedblacklists: [RemovedBlackList!]! @derivedFrom(field: "contract")
	updatedparams: [UpdatedParams!]! @derivedFrom(field: "contract")
	deprecate: [Deprecate!]! @derivedFrom(field: "contract")
}
type Balance @entity {
	id: ID!
	contract: TetherToken!
	account: Account
	value: BigDecimal!
	valueExact: BigInt!
	transferFromEvent: [Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [Transfer!]! @derivedFrom(field: "toBalance")
}
type Approval @entity {
	id: ID!
	contract: TetherToken!
	owner: Account!
	spender: Account!
	value: BigDecimal!
	valueExact: BigInt!
}
type Transfer implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	from: Account
	fromBalance: Balance
	to: Account
	toBalance: Balance
	value: BigDecimal!
	valueExact: BigInt!
}
type Paused implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	isPaused: Boolean!
}
type AddedBlackList implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	user: Account!
}
type RemovedBlackList implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	user: Account!
}
type UpdatedParams implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	rate: BigDecimal!
	maximumFee: BigDecimal!
}
type Deprecate implements Event @entity {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
	contract: TetherToken!
	upgradedAddress: Account!
}
interface Event {
	id: ID!
	transaction: Transaction!
	timestamp: BigInt!
}
type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
